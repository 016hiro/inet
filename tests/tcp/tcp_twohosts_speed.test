%description:
Testing TCP communication speed
    TCP
    TCP_NSC
%#--------------------------------------------------------------------------------------------------------------
%testprog: opp_run
%#--------------------------------------------------------------------------------------------------------------
%file: test.ned

import ned.DatarateChannel;
import inet.nodes.inet.StandardHost;
import inet.networklayer.autorouting.FlatNetworkConfigurator;


network TcpSpeedTest
{
    parameters:
        int n = 2; // number of available tcpType-s: TCP,TCP_NSC
    types:
        channel C extends DatarateChannel
        {
            delay = 0.01us; // ~ 2m
            datarate = 10Mbps;
        }
    submodules:
        server[n*n]: StandardHost {
            parameters:
                numTcpApps = 1;
                tcpAppType = "TCPEchoApp";
                tcpType = ((index % n) == 0) ? "TCP" : 
                          ((index % n) == 1) ? "TCP_NSC" :
                          "UNKNOWN";
        }
        client[n*n]: StandardHost {
            parameters:
                numTcpApps = 1;
                tcpAppType = "TCPSessionApp";
                tcpType = (int(index / n) == 0) ? "TCP" : 
                          (int(index / n) == 1) ? "TCP_NSC" :
                          "UNKNOWN";
                tcpApp[0].connectAddress = "server[" + string( parentIndex() ) + "]";
        }
        configurator: FlatNetworkConfigurator {
            @display("p=70,40");
        }
    connections:
        for i=0..n*n-1
        {
            client[i].pppg++ <--> C <--> server[i].pppg++;
        }
}

%#--------------------------------------------------------------------------------------------------------------
%inifile: omnetpp.ini

[General]
network = TcpSpeedTest
total-stack = 7MB
tkenv-plugin-path = ../../../etc/plugins
#debug-on-errors = true
#record-eventlog = true

#sim-time-limit = 2s+20s
sim-time-limit = 2s+20s+4.2s

#client app:
**.client*.tcpApp[0].active = true
**.client*.tcpApp[0].port = -1
**.client*.tcpApp[0].connectPort = 1000
**.client*.tcpApp[0].tOpen = 1s
**.client*.tcpApp[0].tSend = 2s
**.client*.tcpApp[0].sendBytes = 10000000B
**.client*.tcpApp[0].sendScript = ""
**.client*.tcpApp[0].tClose = 100s

#server app:
**.server*.tcpApp[0].port = 1000
**.server*.tcpApp[0].echoFactor = 2.0
**.server*.tcpApp[0].echoDelay = 0

## tcp apps

# NIC configuration
**.ppp[*].queueType = "DropTailQueue" # in routers
#**.ppp[*].queue.frameCapacity = 10
**.ppp[*].queue.frameCapacity = 47  # good:(13,15,16,18,19,21-25, 7) bad:(17,20)

*.configurator.networkAddress = "192.168.1.0"

%#--------------------------------------------------------------------------------------------------------------
%postprocess-script: check.r
#!/usr/bin/env Rscript

options(echo=FALSE)
options(width=160)
library("omnetpp", warn.conflicts=FALSE)

#TEST parameters
scafile <- 'results/General-0.sca'
linecount <- 4
cliBytes = 10000000
srvBytes = 2 * cliBytes

# begin TEST:

dataset <- loadDataset(scafile)

cat("\nOMNETPP TEST RESULT:\n")
cli <- dataset$scalars[grep("\\.client\\[\\d\\]\\.tcpApp\\[\\d\\]$",dataset$scalars$module),]
cliSent <- cli[cli$name == "bytesSent",]
cliRcvd <- cli[cli$name == "bytesRcvd",]

srv <- dataset$scalars[grep("\\.server\\[\\d\\]\\.tcpApp\\[\\d\\]$",dataset$scalars$module),]
srvSent <- srv[srv$name == "bytesSent",]
srvRcvd <- srv[srv$name == "bytesRcvd",]

cat("\nTCP SPEED TEST RESULT:\n")

if(length(cliSent$value) == linecount && min(cliSent$value) == cliBytes)
{
    cat("CLIENT SENT OK\n")
} else {
    cat("CLIENT SENT BAD:\n")
    cliSent$rate = cliSent$value*100/cliBytes
    print(cliSent[cliSent$value != cliBytes,])
}

if(length(srvRcvd$value) == linecount && min(srvRcvd$value) == cliBytes)
{
    cat("SERVER RCVD OK\n")
} else {
    cat("SERVER RCVD BAD:\n")
    srvRcvd$rate = srvRcvd$value*100/cliBytes
    print(srvRcvd[srvRcvd$value != cliBytes,])
}

if(length(srvSent$value) == linecount && min(srvSent$value) == srvBytes)
{
    cat("SERVER SENT OK\n")
} else {
    cat("SERVER SENT BAD:\n")
    srvSent$rate = srvSent$value*100/srvBytes
    print(srvSent[srvSent$value != srvBytes,])
}

if(length(cliRcvd$value) == linecount && min(cliRcvd$value) == srvBytes)
{
    cat("CLIENT RCVD OK\n")
} else {
    cat("CLIENT RCVD BAD:\n")
    cliRcvd$rate = cliRcvd$value*100/srvBytes
    print(cliRcvd[cliRcvd$value != srvBytes,])
}

cat("\n")

%#--------------------------------------------------------------------------------------------------------------
%contains: check.r.out

OMNETPP TEST RESULT:

TCP SPEED TEST RESULT:
CLIENT SENT OK
SERVER RCVD OK
SERVER SENT OK
CLIENT RCVD OK

%#--------------------------------------------------------------------------------------------------------------
