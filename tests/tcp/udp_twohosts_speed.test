%description:
Testing TCP communication speed
    TCP
    TCP_NSC
%#--------------------------------------------------------------------------------------------------------------
%testprog: opp_run
%#--------------------------------------------------------------------------------------------------------------
%file: test.ned

import inet.networklayer.autorouting.FlatNetworkConfigurator;
import inet.nodes.inet.StandardHost;
import ned.DatarateChannel;


network UdpClientServer
{
    @display("bgb=232,193");
    types:
        channel C extends DatarateChannel
        {
            datarate = 10Mbps;
            delay = 0.1us;
        }
    submodules:
        host1: StandardHost {
            parameters:
                @display("p=53,67;i=device/pc3");
        }
        host2: StandardHost {
            parameters:
                @display("p=181,67;i=device/pc2");
        }
        configurator: FlatNetworkConfigurator {
            parameters:
                @display("p=109,142");
        }
    connections:
        host1.ethg++ <--> C <--> host2.ethg++;
}


%#--------------------------------------------------------------------------------------------------------------
%inifile: omnetpp.ini

[General]
network = UdpClientServer
total-stack = 7MB
tkenv-plugin-path = ../../../etc/plugins
#debug-on-errors = true
#record-eventlog = true

sim-time-limit = 10s

## UDP apps
**.numUdpApps = 1
**.udpAppType = "UDPEchoApp"
**.udpApp[0].localPort = 1234
**.udpApp[0].destPort = 1234
**.udpApp[0].messageFreq = 0.1ms
**.host1.udpApp[0].destAddresses = "host2"
**.host2.udpApp[0].destAddresses = "host1"
#**.udpApp[0].messageLength = 32 bytes
#**.udpApp[0].messageLength = 320 bytes
**.udpApp[0].messageLength = 1000 bytes
#**.udpApp[0].messageLength = 6400 bytes
#**.udpApp[0].messageLength = 7000 bytes

**.arp.cacheTimeout = 1s

# NIC configuration
**.ppp[*].queueType = "DropTailQueue" # in routers
**.ppp[*].queue.frameCapacity = 10  # in routers

*.configurator.networkAddress = "192.168.1.0"
#**.eth.mac.txrate = 10Mbps;

%#--------------------------------------------------------------------------------------------------------------
%postprocess-script: check.r
#!/usr/bin/env Rscript

options(echo=FALSE)
options(width=160)
library("omnetpp", warn.conflicts=FALSE)

#TEST parameters
scafile <- 'results/General-0.sca'
linecount <- 4
cliBytes <- 10000000
srvBytes <- 2 * cliBytes

# begin TEST:

dataset <- loadDataset(scafile)

cat("\nOMNETPP TEST RESULT:\n")
cli <- dataset$scalars[grep("\\.client\\.tcpApp\\[\\d\\]$",dataset$scalars$module),]
cliSent <- cli[cli$name == "bytesSent",]
cliRcvd <- cli[cli$name == "bytesRcvd",]

srv <- dataset$scalars[grep("\\.server\\.tcpApp\\[\\d\\]$",dataset$scalars$module),]
srvSent <- srv[srv$name == "bytesSent",]
srvRcvd <- srv[srv$name == "bytesRcvd",]

cat("\nTCP SPEED TEST RESULT:\n")

if(length(cliSent$value) == linecount && min(cliSent$value) == cliBytes)
{
    cat("CLIENT SENT OK\n")
} else {
    cat("CLIENT SENT BAD:\n")
    cliSent$rate = cliSent$value*100/cliBytes
    print(cliSent[cliSent$value != cliBytes,])
}

if(length(srvRcvd$value) == linecount && min(srvRcvd$value) == cliBytes)
{
    cat("SERVER RCVD OK\n")
} else {
    cat("SERVER RCVD BAD:\n")
    srvRcvd$rate = srvRcvd$value*100/cliBytes
    print(srvRcvd[srvRcvd$value != cliBytes,])
}

if(length(srvSent$value) == linecount && min(srvSent$value) == srvBytes)
{
    cat("SERVER SENT OK\n")
} else {
    cat("SERVER SENT BAD:\n")
    srvSent$rate = srvSent$value*100/srvBytes
    print(srvSent[srvSent$value != srvBytes,])
}

if(length(cliRcvd$value) == linecount && min(cliRcvd$value) == srvBytes)
{
    cat("CLIENT RCVD OK\n")
} else {
    cat("CLIENT RCVD BAD:\n")
    cliRcvd$rate = cliRcvd$value*100/srvBytes
    print(cliRcvd[cliRcvd$value != srvBytes,])
}

cat("\n")

%#--------------------------------------------------------------------------------------------------------------
%contains: check.r.out

OMNETPP TEST RESULT:

TCP SPEED TEST RESULT:
CLIENT SENT OK
SERVER RCVD OK
SERVER SENT OK
CLIENT RCVD OK

%#--------------------------------------------------------------------------------------------------------------
