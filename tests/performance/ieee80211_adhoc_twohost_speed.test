%description:
Testing TCP communication speed
    TCP
    TCP_NSC
%#--------------------------------------------------------------------------------------------------------------
%testprog: opp_run
%#--------------------------------------------------------------------------------------------------------------
%file: test.ned

import inet.world.ChannelControl;
import inet.mobility.NullMobility;
import inet.mobility.CircleMobility;
import inet.linklayer.ieee80211.Ieee80211NicAdhoc;
import inet.base.Sink;
import inet.base.NotificationBoard;
import inet.applications.ethernet.EtherAppCli;


module ThroughputClient
{
    parameters:
        @display("i=device/wifilaptop");
    gates:
        input radioIn @directIn;

    submodules:
        notificationBoard: NotificationBoard {
            parameters:
                @display("p=52,70");
        }
        cli: EtherAppCli {
            parameters:
                registerSAP = false;
                @display("b=40,24;p=180,60,col");
        }
        wlan: Ieee80211NicAdhoc {
            parameters:
                @display("p=112,134;q=queue");
        }
        mobility: CircleMobility {
            parameters:
                @display("p=50,141");
        }
    connections allowunconnected:
        wlan.radioIn <-- radioIn;
        cli.out --> wlan.uppergateIn;
}

module ThroughputServer
{
    parameters:
        @display("i=device/wifilaptop");
    gates:
        input radioIn @directIn;

    submodules:
        notificationBoard: NotificationBoard {
            parameters:
                @display("p=60,70");
        }
        sink: Sink {
            parameters:
                @display("p=210,68,col");
        }
        wlan: Ieee80211NicAdhoc {
            parameters:
                @display("p=120,158;q=queue");
        }
        mobility: NullMobility {
            parameters:
                @display("p=50,141");
        }
    connections allowunconnected:
        wlan.radioIn <-- radioIn;
        sink.in++ <-- wlan.uppergateOut;
}

network Throughput
{
    parameters:
        int numCli;
        double playgroundSizeX;
        double playgroundSizeY;
        @display("b=297,203");
    submodules:
        cliHost[numCli]: ThroughputClient {
            parameters:
                @display("r=,,#707070");
        }
        srvHost: ThroughputServer {
            parameters:
                @display("p=350,350;r=,,#707070");
        }
        channelcontrol: ChannelControl {
            parameters:
                playgroundSizeX = playgroundSizeX;
                playgroundSizeY = playgroundSizeY;
                @display("p=61,46");
        }
}


%#--------------------------------------------------------------------------------------------------------------
%inifile: omnetpp.ini

[General]
network = Throughput
#cmdenv-output-file = omnetpp.log
#debug-on-errors = true
tkenv-plugin-path = ../../../etc/plugins
sim-time-limit = 100s

*.playgroundSizeX = 400
*.playgroundSizeY = 400
**.debug = true
**.coreDebug = false
**.channelNumber = 0
**.channelcontrol.numChannels = 1
**.mobility.x = -1
**.mobility.y = -1

# positions
**.mobility.cx = 200
**.mobility.cy = 200
**.mobility.r = 100
**.mobility.speed = 1 mps
**.mobility.updateInterval = 100ms
**.cliHost[0].mobility.startAngle = 0
**.cliHost[1].mobility.startAngle = 36deg
**.cliHost[2].mobility.startAngle = 72deg
**.cliHost[3].mobility.startAngle = 108deg
**.cliHost[4].mobility.startAngle = 144deg
**.cliHost[5].mobility.startAngle = 180deg
**.cliHost[6].mobility.startAngle = 216deg
**.cliHost[7].mobility.startAngle = 252deg
**.cliHost[8].mobility.startAngle = 288deg
**.cliHost[9].mobility.startAngle = 324deg

# channel physical parameters
*.channelcontrol.carrierFrequency = 2.4GHz
*.channelcontrol.pMax = 20mW
*.channelcontrol.sat = -110dBm
*.channelcontrol.alpha = 2

# access point
**.srvHost.wlan.mac.address = "20:00:00:00:00:00"
**.cliHost[*].wlan.mac.address = "auto"
#**.mgmt.accessPointAddress = "10:00:00:00:00:00"
#**.mgmt.frameCapacity = 10

# nic settings
**.mac.address = "auto"
**.mac.maxQueueSize = 14
**.mac.rtsThresholdBytes = 3000B
**.mac.bitrate = 11Mbps
**.wlan.mac.retryLimit = 7
**.wlan.mac.cwMinData = 31
**.wlan.mac.cwMinBroadcast = 31

**.radio.bitrate = 11Mbps
**.radio.transmitterPower = 20.0mW
**.radio.thermalNoise = -110dBm
**.radio.sensitivity = -85dBm
**.radio.pathLossAlpha = 2
**.radio.snirThreshold = 4dB

# cli
**.cli.reqLength = 1250B
**.cli.respLength = 0
**.cli.destAddress = "20:00:00:00:00:00"
**.cli.destStation = ""

description = "1 host over AP"
Throughput.numCli = 1
**.cli.waitTime = 1ms

%#--------------------------------------------------------------------------------------------------------------
%postprocess-script: check.r
#!/usr/bin/env Rscript

options(echo=FALSE)
options(width=160)
library("omnetpp", warn.conflicts=FALSE)

#TEST parameters
scafile <- 'results/General-0.sca'
linecount <- 1
rcvdBytes <-  11000000/8
expectedRate <- 51.8 # %
maxDeviation <- 2.0 # %
# begin TEST:
expectedRateMin <- expectedRate - maxDeviation
expectedRateMax <- expectedRate + maxDeviation


dataset <- loadDataset(scafile)

cat("\nOMNETPP TEST RESULT:\n")

sink <- dataset$scalars[dataset$scalars$module == "Throughput.srvHost.sink",]
#print(sink)
secs <- (sink$value[sink$name == "rcvdPkBytes:count"] / sink$value[sink$name == "packetPerSec"])
sinkRcvd <- sink[sink$name == "rcvdPkBytes:sum",]

cat("  IEEE80211 SPEED TEST RESULT:\n")

sinkRcvd$rate <- sinkRcvd$value * 100 / (rcvdBytes * secs)
sinkRcvd$isGood <- sinkRcvd$rate >= expectedRateMin && sinkRcvd$rate <= expectedRateMax

#print(sinkRcvd)

cat("    SRV RCVD ")

if(length(sinkRcvd$value) == linecount && min(sinkRcvd$isGood))
{
    cat("OK\n")
} else {
    cat("BAD:\n")
    print(sinkRcvd[!sinkRcvd$isGood,])
}

cat("\n")

%#--------------------------------------------------------------------------------------------------------------
%contains: check.r.out

OMNETPP TEST RESULT:
  IEEE80211 SPEED TEST RESULT:
    SRV RCVD OK

%#--------------------------------------------------------------------------------------------------------------
