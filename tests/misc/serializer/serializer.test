%description:
Test serializing frames

%includes:
#include <stdio.h>
#include "pcap.h"
#include "EthernetSerializer.h"
#include "Ieee80211Serializer.h"

%global:
static void printobject(cObject* object)
{
    cClassDescriptor *descriptor = object->getDescriptor();
    for (int i = 0; i<descriptor->getFieldCount(object); i++){
        EV << descriptor->getFieldName(object, i) << endl;
        EV << descriptor->getFieldAsString(object,i,0);
    }
}

static void testRecord(const char* filename)
{
    FILE *pcapFile;
    struct pcap_hdr fileHeader;
	struct pcaprec_hdr recordHeader;
	
    uint8 readBuf[MAXBUFLENGTH];
	uint8 writeBuf[MAXBUFLENGTH];
    memset((void*)&readBuf, 0, sizeof(readBuf));
    memset((void*)&writeBuf, 0, sizeof(writeBuf));
		
	pcapFile  = fopen(filename, "rb");
	fread(&fileHeader, sizeof(fileHeader), 1, pcapFile);
	fread(&recordHeader, sizeof(recordHeader), 1, pcapFile);
    fread(&readBuf, recordHeader.orig_len, 1, pcapFile);	
	fclose(pcapFile);
		
	uint32 serializedLength;
		
    switch(fileHeader.network)
    {
        case 1:
		{
			cPacket *etherFrame = NULL;
            EthernetSerializer().parse(readBuf, recordHeader.incl_len, &etherFrame);
			printobject(etherFrame);
			serializedLength = EthernetSerializer().serialize((EthernetIIFrame *)etherFrame, writeBuf, sizeof(writeBuf));
            break;
		}
        case 105:
		{
			cPacket *ieee80211Frame = NULL;
            Ieee80211Serializer().parse(readBuf, recordHeader.incl_len, &ieee80211Frame);
			printobject(ieee80211Frame);
			serializedLength = Ieee80211Serializer().serialize((Ieee80211Frame *)ieee80211Frame, writeBuf, sizeof(writeBuf));
            break;
		}
    }
	
	if(recordHeader.incl_len == serializedLength && !memcmp(readBuf, writeBuf, serializedLength))
		EV << "Frames are the same\n";
	else
		EV << "Frames are not the same\n";
}

%activity:
testRecord("clientCopy.pcap");

%contains: stdout
Frames are the same

%not-contains: stdout
Frames are not the same