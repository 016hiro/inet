%description:
Test serializing frames

%includes:
#include <stdio.h>
#include <iostream>
#include "pcap.h"
#include "EthernetSerializer.h"
#include "Ieee80211Serializer.h"

%global:
static void printobject(cObject* object)
{
    cClassDescriptor *descriptor = object->getDescriptor();
    for (int i = 0; i<descriptor->getFieldCount(object); i++){
        EV << descriptor->getFieldName(object, i) << ": ";
        EV << descriptor->getFieldAsString(object,i,0) << endl;
    }
}

static void testRecord(const char* filename)
{
    FILE *pcapFile;
    struct pcap_hdr fileHeader;
    struct pcaprec_hdr recordHeader;
    uint8 readBuf[8192];
    uint8 writeBuf[8192];

    memset((void*)&readBuf, 0, sizeof(readBuf));
    memset((void*)&writeBuf, 0, sizeof(writeBuf));

    pcapFile  = fopen(filename, "rb");
    fread(&fileHeader, sizeof(fileHeader), 1, pcapFile);
    fread(&recordHeader, sizeof(recordHeader), 1, pcapFile);
    fread(&readBuf, recordHeader.orig_len, 1, pcapFile);
    fclose(pcapFile);

    uint32 serializedLength = 0;

    switch(fileHeader.network)
    {
        case LINKTYPE_ETHERNET:
        {
            cPacket *etherFrame = EthernetSerializer().parse(readBuf, recordHeader.incl_len);
            cPacket *temp = etherFrame;
            while (temp)
            {
                printobject(temp);
                temp = temp->getEncapsulatedPacket();
            }
            serializedLength = EthernetSerializer().serialize((EthernetIIFrame *)etherFrame, writeBuf, sizeof(writeBuf));
            break;
        }
        case LINKTYPE_IEEE801_11:
        {
            cPacket *ieee80211Frame = Ieee80211Serializer().parse(readBuf, recordHeader.incl_len);
            cPacket *temp = ieee80211Frame;
            while (temp)
            {
                printobject(temp);
                temp = temp->getEncapsulatedPacket();
            }
            serializedLength = Ieee80211Serializer().serialize((Ieee80211Frame *)ieee80211Frame, writeBuf, sizeof(writeBuf));
            break;
        }
    }

    if(recordHeader.incl_len == serializedLength && !memcmp(readBuf, writeBuf, serializedLength))
        EV << "Frames are the same\n";
    else
        EV << "Frames are not the same\n";
}

%activity:
testRecord("../../arp.pcap");
testRecord("../../tcp.pcap");

%contains-regex: stdout
dest: FF-FF-FF-FF-FF-FF
src: 00-07-0D-AF-F4-54
.*
etherType: 2054
.*
srcMACAddress: 00-07-0D-AF-F4-54
destMACAddress: 00-00-00-00-00-00
srcIPAddress: 24.166.172.1
destIPAddress: 24.166.173.159
.*
Frames are the same
.*
dest: 00-13-C6-00-55-A5
src: 00-1D-60-B3-01-84
.*
etherType: 2048
.*
srcAddress: 192.168.1.140
destAddress: 192.168.1.194
transportProtocol: 6
.*
srcPort: 56760
destPort: 23
sequenceNo: 3671007701
.*
Frames are the same

%not-contains: stdout
Frames are not the same