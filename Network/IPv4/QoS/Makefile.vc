#
#  Makefile for QoS
#
#  ** This file was automatically generated by the command:
#  opp_nmakemake -f -n -r -c ..\..\..\ipsuiteconfig.vc -I..\QoSStub -I..\Core -I..\..\..\Transport\TCP -I..\..\..\Util
#
#  By the Perl version of opp_makemake for MSVC
#


# Name of target to be created (-o option)
TARGET = QoS

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# uncomment 1 of the 3 lines to support either serial or parallel operation
KERNEL_LIBS=$(STD_KERNEL_LIBS)
# KERNEL_LIBS=$(PVM_KERNEL_LIBS)
# KERNEL_LIBS=$(MPI_KERNEL_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH= -I..\QoSStub -I..\Core -I..\..\..\Transport\TCP -I..\..\..\Util

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with
EXT_DIR_OBJS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------


!include "..\..\..\ipsuiteconfig.vc"

# User interface libs
CMDENV_LIBS=envir.lib cmdenv.lib
TKENV_LIBS=envir.lib tkenv.lib $(TK_LIBS)

# Simulation kernel
STD_KERNEL_LIBS=sim_std.lib
MPI_KERNEL_LIBS=sim_mpi.lib $(MPI_LIBS)
PVM_KERNEL_LIBS=sim_pvm.lib $(PVM_LIBS)

# Simulation kernel and user interface libraries
OMNETPP_LIBS=/libpath:$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(CFLAGS) $(NEDCFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)

#------------------------------------------------------------------------------
# object files in this directory
OBJS= Connection_Element_n.obj Enqueue_Hook_Trigger_n.obj FIFO_Dequeue_n.obj FIFO_Enqueue_n.obj FIFO_Queue_n.obj L2_DequeueHook_n.obj L2_EnqueueHook_n.obj NF_IP_FORWARD_n.obj NF_IP_LOCAL_IN_n.obj NF_IP_LOCAL_OUT_n.obj NF_IP_POST_ROUTING_n.obj NF_IP_PRE_ROUTING_n.obj Router_Deq_Hook_Trigger_n.obj Router_L2_n.obj SetInAdapter_n.obj any_queue.obj Connection_Element.obj FIFO_Dequeue.obj FIFO_Enqueue.obj FIFO_Queue.obj multiply_element.obj packet.obj router_deq_hook_trigger.obj setinadapter.obj simulatedINTERNAL.obj

# subdirectories to recurse into
SUBDIRS= 

$(TARGET): $(OBJS) Makefile.vc subdirs

# purify: $(OBJS) $(EXTRA_OBJS) subdirs Makefile.vc
# 	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

subdirs:

Connection_Element_n.obj: Connection_Element_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp Connection_Element_n.cc

Connection_Element_n.cc: Connection_Element.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) Connection_Element.ned

Enqueue_Hook_Trigger_n.obj: Enqueue_Hook_Trigger_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp Enqueue_Hook_Trigger_n.cc

Enqueue_Hook_Trigger_n.cc: Enqueue_Hook_Trigger.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) Enqueue_Hook_Trigger.ned

FIFO_Dequeue_n.obj: FIFO_Dequeue_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp FIFO_Dequeue_n.cc

FIFO_Dequeue_n.cc: FIFO_Dequeue.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) FIFO_Dequeue.ned

FIFO_Enqueue_n.obj: FIFO_Enqueue_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp FIFO_Enqueue_n.cc

FIFO_Enqueue_n.cc: FIFO_Enqueue.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) FIFO_Enqueue.ned

FIFO_Queue_n.obj: FIFO_Queue_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp FIFO_Queue_n.cc

FIFO_Queue_n.cc: FIFO_Queue.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) FIFO_Queue.ned

L2_DequeueHook_n.obj: L2_DequeueHook_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp L2_DequeueHook_n.cc

L2_DequeueHook_n.cc: L2_DequeueHook.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) L2_DequeueHook.ned

L2_EnqueueHook_n.obj: L2_EnqueueHook_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp L2_EnqueueHook_n.cc

L2_EnqueueHook_n.cc: L2_EnqueueHook.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) L2_EnqueueHook.ned

NF_IP_FORWARD_n.obj: NF_IP_FORWARD_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp NF_IP_FORWARD_n.cc

NF_IP_FORWARD_n.cc: NF_IP_FORWARD.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) NF_IP_FORWARD.ned

NF_IP_LOCAL_IN_n.obj: NF_IP_LOCAL_IN_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp NF_IP_LOCAL_IN_n.cc

NF_IP_LOCAL_IN_n.cc: NF_IP_LOCAL_IN.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) NF_IP_LOCAL_IN.ned

NF_IP_LOCAL_OUT_n.obj: NF_IP_LOCAL_OUT_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp NF_IP_LOCAL_OUT_n.cc

NF_IP_LOCAL_OUT_n.cc: NF_IP_LOCAL_OUT.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) NF_IP_LOCAL_OUT.ned

NF_IP_POST_ROUTING_n.obj: NF_IP_POST_ROUTING_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp NF_IP_POST_ROUTING_n.cc

NF_IP_POST_ROUTING_n.cc: NF_IP_POST_ROUTING.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) NF_IP_POST_ROUTING.ned

NF_IP_PRE_ROUTING_n.obj: NF_IP_PRE_ROUTING_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp NF_IP_PRE_ROUTING_n.cc

NF_IP_PRE_ROUTING_n.cc: NF_IP_PRE_ROUTING.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) NF_IP_PRE_ROUTING.ned

Router_Deq_Hook_Trigger_n.obj: Router_Deq_Hook_Trigger_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp Router_Deq_Hook_Trigger_n.cc

Router_Deq_Hook_Trigger_n.cc: Router_Deq_Hook_Trigger.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) Router_Deq_Hook_Trigger.ned

Router_L2_n.obj: Router_L2_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp Router_L2_n.cc

Router_L2_n.cc: Router_L2.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) Router_L2.ned

SetInAdapter_n.obj: SetInAdapter_n.cc
	$(CXX) -c $(NEDCOPTS) /Tp SetInAdapter_n.cc

SetInAdapter_n.cc: SetInAdapter.ned
	$(NEDC:/=\) -s _n.cc $(INCLUDE_PATH) SetInAdapter.ned

any_queue.obj: any_queue.cc
	$(CXX) -c $(COPTS) /Tp any_queue.cc

Connection_Element.obj: Connection_Element.cc
	$(CXX) -c $(COPTS) /Tp Connection_Element.cc

FIFO_Dequeue.obj: FIFO_Dequeue.cc
	$(CXX) -c $(COPTS) /Tp FIFO_Dequeue.cc

FIFO_Enqueue.obj: FIFO_Enqueue.cc
	$(CXX) -c $(COPTS) /Tp FIFO_Enqueue.cc

FIFO_Queue.obj: FIFO_Queue.cc
	$(CXX) -c $(COPTS) /Tp FIFO_Queue.cc

multiply_element.obj: multiply_element.cc
	$(CXX) -c $(COPTS) /Tp multiply_element.cc

packet.obj: packet.cc
	$(CXX) -c $(COPTS) /Tp packet.cc

router_deq_hook_trigger.obj: router_deq_hook_trigger.cc
	$(CXX) -c $(COPTS) /Tp router_deq_hook_trigger.cc

setinadapter.obj: setinadapter.cc
	$(CXX) -c $(COPTS) /Tp setinadapter.cc

simulatedINTERNAL.obj: simulatedINTERNAL.cc
	$(CXX) -c $(COPTS) /Tp simulatedINTERNAL.cc


doc: neddoc doxy

neddoc:
	@opp_neddoc -a

doxy: doxy.cfg
	@doxygen doxy.cfg

clean:
	-del *.obj *_n.cc *_n.h *_m.cc *_m.h $(TARGET)$(EXE_SUFFIX) 2>NUL
	-del *.vec *.sca 2>NUL
	-for %%i in ( $(SUBDIRS) ) do cd %%i && nmake /nologo /f Makefile.vc clean && cd ..

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -f Makefile.vc -- *.cc

re-makemake:
	opp_nmakemake_vc -f   #recreate Makefile

# DO NOT DELETE THIS LINE -- make depend depends on it.

