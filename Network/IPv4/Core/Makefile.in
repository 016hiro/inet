#
#  Makefile for IPProcessing
#
#  ** This file was automatically generated by the command:
#  makemake -f -m -n -I. -I../Interface -I../IPNode -I../QoS -I../MAC_LLC
#

# Name of target to be created (-o option)
TARGET = IPProcessing

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# Uncomment the second line for parallel execution (PVM3) support (-p option):
KERNEL_LIBS=$(STD_KERNEL_LIBS)
# KERNEL_LIBS=$(PVM_KERNEL_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH= -I. -I../Interface -I../IPNode -I../QoS -I../MAC_LLC

# misc additional object and library files to link
EXRA_OBJS=

# object files in subdirectories
SUBDIR_OBJS=

# Additional libraries (-l option)
LIBS=

#------------------------------------------------------------------------------

NEDC=@NEDC@
CXX=@CXX@
CC=@CC@
AR=@AR@
SHLIB_LD=@SHLIB_LD@

CFLAGS=@CFLAGS@
LDFLAGS=@LDFLAGS@
EXE_SUFFIX=@EXE_SUFFIX@

OMNETPP_INCL_DIR=@OMNETPP_INCL_DIR@
OMNETPP_LIB_DIR=@OMNETPP_LIB_DIR@

TK_LIBS=@TK_LIBS@
PVM_LIBS=@PVM_LIBS@
SYS_LIBS=@SYS_LIBS@
SYS_LIBS_PURE=-lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
STD_KERNEL_LIBS=-lsim_std
PVM_KERNEL_LIBS=-lsim_pvm $(PVM_LIBS)

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)

#------------------------------------------------------------------------------

# Object files from this directory to link
OBJS= ICMP_n.o IPFragmentation_n.o IPMulticast_n.o IPOutput_n.o IPProcessing_n.o IPSend_n.o IPTunneling_n.o LocalDeliver_n.o PreRouting_n.o Routing_n.o ICMP.o  IPFragmentation.o  IPMulticast.o  IPOutputCore.o   IPSendCore.o  IPTunneling.o  LocalDeliverCore.o  PreRoutingCore.o  RoutingCore.o 

$(TARGET): $(OBJS) Makefile
	

purify: $(OBJS) $(EXRA_OBJS)   Makefile
	purify -chain-length="20" -g++=yes gcc $(LDFLAGS) $(OBJS) $(EXRA_OBJS) $(SUBDIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

ICMP_n.o: ICMP_n.cc
	$(CXX) -c $(COPTS) ICMP_n.cc

ICMP_n.cc: ICMP.ned
	$(NEDC) $(INCLUDE_PATH) ICMP.ned

IPFragmentation_n.o: IPFragmentation_n.cc
	$(CXX) -c $(COPTS) IPFragmentation_n.cc

IPFragmentation_n.cc: IPFragmentation.ned
	$(NEDC) $(INCLUDE_PATH) IPFragmentation.ned

IPMulticast_n.o: IPMulticast_n.cc
	$(CXX) -c $(COPTS) IPMulticast_n.cc

IPMulticast_n.cc: IPMulticast.ned
	$(NEDC) $(INCLUDE_PATH) IPMulticast.ned

IPOutput_n.o: IPOutput_n.cc
	$(CXX) -c $(COPTS) IPOutput_n.cc

IPOutput_n.cc: IPOutput.ned
	$(NEDC) $(INCLUDE_PATH) IPOutput.ned

IPProcessing_n.o: IPProcessing_n.cc
	$(CXX) -c $(COPTS) IPProcessing_n.cc

IPProcessing_n.cc: IPProcessing.ned
	$(NEDC) $(INCLUDE_PATH) IPProcessing.ned

IPSend_n.o: IPSend_n.cc
	$(CXX) -c $(COPTS) IPSend_n.cc

IPSend_n.cc: IPSend.ned
	$(NEDC) $(INCLUDE_PATH) IPSend.ned

IPTunneling_n.o: IPTunneling_n.cc
	$(CXX) -c $(COPTS) IPTunneling_n.cc

IPTunneling_n.cc: IPTunneling.ned
	$(NEDC) $(INCLUDE_PATH) IPTunneling.ned

LocalDeliver_n.o: LocalDeliver_n.cc
	$(CXX) -c $(COPTS) LocalDeliver_n.cc

LocalDeliver_n.cc: LocalDeliver.ned
	$(NEDC) $(INCLUDE_PATH) LocalDeliver.ned

PreRouting_n.o: PreRouting_n.cc
	$(CXX) -c $(COPTS) PreRouting_n.cc

PreRouting_n.cc: PreRouting.ned
	$(NEDC) $(INCLUDE_PATH) PreRouting.ned

Routing_n.o: Routing_n.cc
	$(CXX) -c $(COPTS) Routing_n.cc

Routing_n.cc: Routing.ned
	$(NEDC) $(INCLUDE_PATH) Routing.ned

ICMP.o: ICMP.cc
	$(CXX) -c $(COPTS) ICMP.cc

IPFragmentation.o: IPFragmentation.cc
	$(CXX) -c $(COPTS) IPFragmentation.cc

IPMulticast.o: IPMulticast.cc
	$(CXX) -c $(COPTS) IPMulticast.cc

IPOutputCore.o: IPOutputCore.cc
	$(CXX) -c $(COPTS) IPOutputCore.cc

IPSendCore.o: IPSendCore.cc
	$(CXX) -c $(COPTS) IPSendCore.cc

IPTunneling.o: IPTunneling.cc
	$(CXX) -c $(COPTS) IPTunneling.cc

LocalDeliverCore.o: LocalDeliverCore.cc
	$(CXX) -c $(COPTS) LocalDeliverCore.cc

PreRoutingCore.o: PreRoutingCore.cc
	$(CXX) -c $(COPTS) PreRoutingCore.cc

RoutingCore.o: RoutingCore.cc
	$(CXX) -c $(COPTS) RoutingCore.cc

clean:
	rm -f *.o *_n.cc $(TARGET)$(EXE_SUFFIX)
	rm -f *.vec *.sca

depend:
	makedepend -Y $(INCLUDE_PATH) -- *.cc
	makedepend -Y $(INCLUDE_PATH) -fMakefile.in -- *.cc

re-makemake:
	makemake -f  -n -I. -I../Interface -I../IPNode -I../QoS -I../MAC_LLC   #recreate Makefile

re-makemake-m:
	makemake -f -m  -n -I. -I../Interface -I../IPNode -I../QoS -I../MAC_LLC   #recreate Makefile.in

# DO NOT DELETE THIS LINE -- make depend depends on it.

