ignore:
-------
PCB* pcb()
bool pendingAccept()

"is":
-----
bool active()
bool valid()


"get", with capitalization etc (?):
------------------------------------
simtime_t DIFSPeriod()   ==> getDIFS()
simtime_t EIFSPeriod()   ==> getEIFS()
simtime_t PIFSPeriod()   ==> getPIFS()
simtime_t SIFSPeriod()   ==> getSIFS()
simtime_t SlotPeriod()   ==> getSlotTime()
int mtu()                ==> getMTU()
IN_Port rtcpPort()
IN_Port rtpPort()
SDESChunk *sdesChunk()
cArray *rtcpPackets()
cArray *sdesChunks()


"get" -- to be revised!!
------------------------
bool ipForward()
double _maxRandomFactor()
double _minRandomFactor()
int multicastInterface()   ==> multicastInterfaceId() ??  [setter too!]
int packetsLostCumulative() ==> numTotalPacketsLost()?  [setter too!]

uint _maxFinalRtrAdvertisements()
uint _maxInitialRtrAdvertisements()
uint _maxMulticastSolicit()
uint _maxNeighbourAdvertisement()
uint _maxRtrSolicitations()
uint _maxUnicastSolicit()
simtime_t _delayFirstProbeTime()
simtime_t _maxAnycastDelayTime()
simtime_t _maxInitialRtrAdvertInterval()
simtime_t _maxRADelayTime()
simtime_t _maxRtrSolicitationDelay()
simtime_t _minDelayBetweenRAs()
simtime_t _reachableTime()
simtime_t _retransTimer()
simtime_t _rtrSolicitationInterval()
IPv4InterfaceData *ipv4()
IPv6InterfaceData *ipv6()
protocol3()
protocol4()

initialSeqNum() ==> rather chooseInitialSeqNum()?????

a bit awkward: getNetmask().getNetmaskLength();

getInetAddress()...   [used to be: inetAddress()]

simtime_t backoff() ==> computeBackoff()
contentionWindow() ==> computeContentionWindow() ?? [was: contentionWindow()]



TBD:
========

IPAddress gatewayForDestAddr(const IPAddress& dest)
IPAddress interfaceAddrByPeerAddress(IPAddress peerIP)
IPAddress peerByLocalAddress(IPAddress localInf)
IPAddress peerRemoteInterface(IPAddress peerIP)
IPAddress primaryAddress(IPAddress localInf)
IPAddress routerIdOf(cModule *host)
IPv6Route *route(int i)
IPvXAddress addressOf(cModule *host, const char *ifname, int addrType=ADDR_PREFER_IPv6)
IPvXAddress addressOf(cModule *host, int addrType=ADDR_PREFER_IPv6)
InterfaceEntry *interfaceAt(int pos)
InterfaceEntry *interfaceByAddress(const IPAddress& address)
InterfaceEntry *interfaceByAddress(const IPv6Address& address)
InterfaceEntry *interfaceByName(const char *name)
InterfaceEntry *interfaceByNetworkLayerGateIndex(int index)
InterfaceEntry *interfaceByNodeInputGateId(int id)
InterfaceEntry *interfaceByNodeOutputGateId(int id)
InterfaceEntry *interfaceForDestAddr(const IPAddress& dest)
InterfaceEntry *sourceInterfaceFrom(cMessage *msg)
InterfaceTable *interfaceTableOf(cModule *host)
MulticastRoutes multicastRoutesFor(const IPAddress& dest)
NotificationBoard *notificationBoardOf(cModule *host)
RTPSSRCGate *newSSRCGate(u_int32 ssrc)
ReceptionReport *receptionReport(simtime_t now)
RoutingEntry *routingEntry(int k)
RoutingTable *routingTableOf(cModule *host)
RoutingTable6 *routingTable6Of(cModule *host)
SenderReport *senderReport(simtime_t now)
TCPSocket *peerSocket(IPAddress peerAddr)
TCPSocket *peerSocketSoft(IPAddress peerAddr)
bool AnyNeighborInStates (int states)
bool DestinationIsUnreachable (OSPFLSA* lsa)
bool localDeliver(const IPAddress& dest)
bool localDeliver(const IPv6Address& dest)
bool packetOk(double snirMin, int length, double bitrate)
bool packetOk(double snirMin, int lengthMPDU, double bitrate)
bool packetOk(double, int)
cModule *payloadOwner(cMessage *msg)
const AdvPrefix& advPrefix(int i)
const Key *lookupKeyAddr(Key& key)
const char *eventName(int event)
const char *indicationName(int code)
const char *modeName(int mode)
const char *notificationCategoryName(int category)
const char *pktTypeName(int type)
const char *routeSrcName(RouteSrc src)
const char *scopeName(Scope s)
const char *stateName(ReachabilityState state)
const char *stateName(State state)
const char *stateName(int state)
const char *timerTypeName(int type)
const char* logName(void)
destinationType (OSPF::RoutingTableEntry::NetworkDestination)
destinationType (entry.destinationType)
double bitErrorRate(double snir, double bandwidth, double bitrate)
double distance( const Coord a )
double frameDuration(Ieee80211Frame *msg)
double frameDuration(int bits, double bitrate)
double sqrdist( const Coord a )
int nodepos(const EroVector& ERO, IPAddress node)
int numMatchingPrefixBits(const IPAddress& to_cmp)
int outputGateForProtocol(int protocol)
int sign(double i)
simtime_t BackoffPeriod(Ieee80211Frame *msg, int r)
simtime_t packetDuration(int bits)
simtime_t timeOut(_802_11frameType type, simtime_t last_frame_duration)
ulong bytesAvailable(uint32 fromSeq)
unsigned int linkIndex(IPAddress advrouter, IPAddress linkid)
unsigned int linkIndex(IPAddress localInf)
